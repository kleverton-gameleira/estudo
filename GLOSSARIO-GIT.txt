**************** TRABALHANDO COM O GIT PARA CONTROLAR VERSOES *********

***********************************************************************
***********************************************************************
***********************************************************************
***********************************************************************

ls -lha = este comando lista todo o conteudo do diretorio que esta sendo ratreado pelo git

git config --global user.name 'kleverton gameleira'   =  este comando informa para o git o nome do usuario que esta usando o sistema

git config --global user.email vetongameleira@gmail.com   = este comando informa um email para o usuario do git esta usando o sistema

git init = este comando inicia um repositorio git no diretorio selecionado para versionar e controlar os arquivos as versoes dos arquivos existentes no diretorio

git status = este comando retorna qual é o status dos arquivos do diretorio, se estao ou nao sendo rastreados ou se existe nos arquivos rastreados alguma mudanca que
	     ainda nao foi comitada.


**** COMANDOS PARA ADICIONAR ARQUIVOS NA AREA DE STAGE *******


git add nome_arquivo.extensao  = este comando adiciona o arquivo para area de rastreo, apartir de agora as mudanças no arquivos seram rastreadas

git add .  = o comando add contendo um ponto e nao o nome do arquivo adiciona todos os arquivos contidos no diretorio na area de rastreio de uma vez só


**** COMANDOS PARA DESFAZER MUDANÇAS ANTES QUE ELAS ESTEJAM NA STAGE AREA ****

git checkout -- nome_arquivo.extensao  = este comando desfaz as alterações no arquivo antes que ele seja adicionado a stage area. Outra utilidade para este comando
					 é que ele pode recuperar os arquivos que deletamos do diretorio principal por acidente

git reset -- nome_arquivo.extensao = este comando retira o arquivo da area de stage trazendo-o para a area de trabalho para que as mudanças que foram adicionadas nele
				     possam ser desfeitas.

git reset --hard = este comando retira todos os arquivos que estao na area de stage e os traz para a area de trabalho e desfaz automaticamente todas as alteracoes nestes
		   arquivos, deixando tudo como estava no ultimo comite



**** COMANDOS PARA COMMITAR ARQUIVOS ****


git commit -m 'mensagem que identifica o commit que acabou de ser realizado'  = este comando grava no repositorio do git todas as alterações que foram feitas no arquivo

git commit -a -m 'mensagem que descreve o commit' = este comando faz a adicao da alteracao na area de stage e commit a mudança no diretorio de uma vez só.

git commit -am 'mensagem que descreve o commit' = este comando otimiza o trabalho de adicionar arquivos na area de stage e comitalos de uma vez so com um unico comando.



**** COMANDOS PARA VISUALIZAR O HISTORICO DE COMITES REALIZADOS ****


git log = este comando retorna todos os commits que foram feitos ate o momento no repositorio.

a tecla q sai do resultado de consulta dos logs de alteracoes

git log -n 2 = este comando retorna apenas os ultimos comites feitos com referencia ao numero informado no final do comando

git log --oneline  = este comando retorna todos os comites feitos de maneira otimizada, mostrando apenas o codigo hash e a descricao do commit

git log --stat = este comando retorna todos os comites efetuados e mostra a informacao de quantas linhas foram inseridas e quando foram removidas do documento.

git log -n 2 --oneline --stat = existe a possibilidade de combinar varios tipos de saida de log na mesma consulta.



**** COMANDOS PARA VISUALIZAR A DIFERENÇA ENTRE OS ARQUIVOS ****



git diff nomeArquivo.extensao = este comando retorna todas as diferenças que foram feitas no arquivo passado como parametro no comando que ainda nao foi adicionado na 
				area de stage para ser comitado.

git diff = retorna todas as diferenças que foram feitas em todos os arquivos que ainda nao foram adicionados na area de stage 

git diff --staged = este comando retorna as diferencas que existem entre o arquivo que foi modificado e acabou de ser inserido na area de stage mas que ainda nao foi
		    comitado, para a ultima versao do arquivo que foi comitado.

git diff 222cccc = o comando git diff acompanhando de uma codigo hash do arquivo que ainda nao esta na area de stage retorna a diferenca entre o arquivo que foi comitado
		   pela ultima vez e o arquivo que acabou de ser alterado e ainda nao foi adicionado o area de stage para ser comitado.

git diff f692c0a..222cccc = este comando retorna a diferenca no arquivo no intervalo entre os dois comites passados como parametro no comite

git diff 222cccc~2 = este comando é uma variação do comando git diff para verificar a diferenca no arquivo entre os comites sendo que o numero que vem apos o ~
		     corresponde a quantidade de comites anteriores que se quer pesquisar


**** COMANDOS PARA REMOVER E/OU RENOMEAR ARQUIVOS E MOVIMENTAR ENTRE DIRETORIOS ****

git rm nome_arquivo.extensao = este comando remove um arquivo que ja esta sendo rastreado do diretorio principal do git

git mv nome_atual.txt nome_novo.txt = este comando renomea arquivos dentro do diretorio 

git mv nome_arquivo.txt nome_diretorio/nome_arquivo.txt  =  este comando 


**** COMANDOS DE INTERAÇÃO COM O DIRETORIO REMOTO DO GIT ****
git remote add origin https://github.com/kleverton-gameleira/estudo.git = este comando aponto o diretorio local para um diretorio remoto do github

git push origin master =  este comando envia todo todo o conteudo do repositorio local para repositorio remoto no github

git clone https://github.com/fulanodasilva/citacoes.git = este comando clona todo o conteudo que esta em um diretorio remoto no github para o seu diretorio local